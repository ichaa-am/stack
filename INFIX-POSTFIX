#include <stdio.h>
#include <stdlib.h>
#define MAKS 5

typedef int item;
typedef struct stack
{
    item data[MAKS];
    int idx;
}stack;

void initial(stack *);
int empty(stack *);
int full(stack *);
void push(stack *, item);
item pop(stack *);
int derajat(char);
void cetak(char[]);

int main()
{
    stack tumpukan;
    char tampung[MAKS], answer;
    do
    {
        initial(&tumpukan);
        fflush(stdin);
        puts("");
        printf("Masukkan ekspresi dalam notasi Infix: ");
        fgets(tampung, sizeof(tampung), stdin);
        printf("Ungkapan Postfix nya: ");
        cetak(tampung);
        puts("");
        fflush(stdin);
        printf("\nMau mencoba lagi(y/t)?");
        scanf("%c", &answer);
        fflush(stdin);
    }while(answer=='y' || answer=='Y');
}

void initial(stack *s)
{
    s->idx = 0;
}

int full(stack *s)
{
    return(s->idx == MAKS);
}

int empty(stack *s)
{
    return(s->idx == 0);
}

void push(stack *s, item x)
{
    if(full(s)==1)
        printf("\nData sudah penuh");
    else
    {
        s->data[s->idx] = x;
        (s->idx)++;
    }
}

item pop(stack *s)
{
    if(empty(s)==1)
        printf("\nData kosong");
    else
    {
        --(s->idx);
        return(s->data[s->idx]);
    }
}

int derajat(char x) //menentukan derajat operator
{
    if(x=='(')
        return 0;
    else if((x=='+') || (x=='-'))
        return 1;
    else if((x=='*') || (x=='/'))
        return 2;
    else if(x=='^')
        return 3;
    else
        return -1; //invalid operator
}

void cetak(char temp [])
{

}
