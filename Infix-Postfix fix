#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAKS 360

typedef char item;
typedef struct stack
{
    item data[MAKS];
    int idx;
}stack;

void initial(stack *);
int empty(stack *);
int full(stack *);
void push(stack *, item);
item pop(stack *);
int derajat(char);
void konversi(char[MAKS]);

int main()
{
    //stack tumpukan;
    char answer;
    do
    {
        char infix[MAKS];
        fflush(stdin);
        printf("\nMasukkan ekspresi dalam notasi Infix ( *infix* ): ");
        fgets(infix, sizeof(infix), stdin);
        printf("Ungkapan Postfix nya: ");
        konversi(infix);
        printf("\n\nMau mencoba lagi(y/t)?");
        scanf("%c", &answer);
        fflush(stdin);
    }while(answer=='y' || answer=='Y');
    return 0;
}

void initial(stack *s)
{
    s->idx = 0;
}

int full(stack *s)
{
    return(s->idx == MAKS);
}

int empty(stack *s)
{
    return(s->idx == 0);
}

void push(stack *s, item x)
{
    if(full(s)==1)
        printf("\nData sudah penuh");
    else
    {
        s->data[s->idx] = x;
        (s->idx)++;
    }
}

item pop(stack *s)
{
    if(empty(s)==1)
        printf("\nData kosong");
    else
    {
        --(s->idx);
        return(s->data[s->idx]);
    }
}

int derajat(char x) //menentukan derajat operator
{
    if(x=='(')
        return 0;
    else if((x=='+') || (x=='-'))
        return 1;
    else if((x=='*') || (x=='/'))
        return 2;
    else if(x=='^')
        return 3;
    else
        return -1; //invalid operator
}

void konversi(char infix[MAKS])
{
    stack tumpukan;
    initial(&tumpukan);
    char temp;
    int drjt;
    for(int i=0; i< strlen(infix); i++)
    {
        if(infix[i] > '0' && infix[i] <='9')
        {
            printf("%c ", infix[i]);
        }
        else if(infix[i]=='(')
        {
            push(&tumpukan, infix[i]);
        }
        else if(infix[i]==')')
        {
            push(&tumpukan, infix[i]);
            temp=" ";
            while(temp != '(')
            {
                temp=pop(&tumpukan);
                if(temp == '(' || temp==')')
                {
                    continue;
                }
                printf("%c ", temp);
            }
        }
        else
        {
            drjt = derajat(infix[i]);
            if(empty(&tumpukan) || drjt > derajat(tumpukan.data[tumpukan.idx]))
            {
                push(&tumpukan, infix[i]);
            }
            else
            {
                while(drjt < derajat(tumpukan.data[tumpukan.idx]))
                {
                    temp = pop(&tumpukan);
                    printf("%c ", temp);
                }
                push(&tumpukan, infix[i]);
            }
        }
    }
    while(empty(&tumpukan))
    {
        printf("%c ", pop(&tumpukan));
    }
}
